
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EcoData"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "EcoData-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('EcoData')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("EcoData")
> ### * EcoData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EcoData
> ### Title: EcoData - A collection of ecological datasets for teaching
> ### Aliases: EcoData
> 
> ### ** Examples
> 
> vignette("EcoData", package="EcoData")
starting httpd help server ... done
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EcoData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plantcounts")
> ### * plantcounts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plantcounts
> ### Title: Plantcounts
> ### Aliases: plantcounts
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> plants_sf <- plantcounts
> plants_sf$agrarea_scaled <- scale(plants_sf$agrarea)
> 
> plants_sf$longitude <- plants_sf$lon
> plants_sf$latitude <- plants_sf$lat
> library(sf)
Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1
> plants_sf <- sf::st_as_sf(plants_sf, coords = c('longitude', 'latitude'), crs = st_crs("+proj=longlat +ellps=bessel +towgs84=606,23,413,0,0,0,0 +no_defs"))
> 
> library(mapview)
GDAL version >= 3.1.0 | setting mapviewOptions(fgb = TRUE)
> mapview(plants_sf["agrarea"])
> mapview(plants_sf["richness"], map.types = "OpenTopoMap")
> 
> library(glmmTMB)
> # Negative binomial model -------------------------------------------------
> fit <-  glmmTMB(richness ~ agrarea_scaled + offset(log(area)), family = nbinom1, data = plants_sf)
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
> summary(fit)
 Family: nbinom1  ( log )
Formula:          richness ~ agrarea_scaled + offset(log(area))
Data: plants_sf

     AIC      BIC   logLik deviance df.resid 
  3348.8   3359.8  -1671.4   3342.8      282 


Overdispersion parameter for nbinom1 family (): 14.3 

Conditional model:
               Estimate Std. Error z value Pr(>|z|)    
(Intercept)     2.66825    0.01047  254.79  < 2e-16 ***
agrarea_scaled -0.03316    0.01021   -3.25  0.00117 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> library(DHARMa)
This is DHARMa 0.4.1. For overview type '?DHARMa'. For recent changes, type news(package = 'DHARMa') Note: Syntax of plotResiduals has changed in 0.3.0, see ?plotResiduals for details
> res <- simulateResiduals(fit)
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Warning in Matrix::sparseMatrix(dims = c(0, 0), i = integer(0), j = integer(0),  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
> plot(res)
> testSpatialAutocorrelation(res, x = plants_sf$lon, y =  plants_sf$lat)

	DHARMa Moran's I test for distance-based autocorrelation

data:  res
observed = 0.0958792, expected = -0.0035211, sd = 0.0047788, p-value <
2.2e-16
alternative hypothesis: Distance-based autocorrelation

> 
> library(gstat)
> vario <- gstat::variogram(residuals(res) ~ 1, loc = ~ lon + lat, data = plantcounts, alpha=c(0,45,90,135))
> plot(vario)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plantcounts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:gstat', 'package:DHARMa', 'package:glmmTMB',
  'package:mapview', 'package:sf'

> nameEx("snouter")
> ### * snouter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: snouter
> ### Title: Snouter
> ### Aliases: snouter
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> # plotting the data 
> image(xtabs(rain~X+Y, data=snouter))
> image(xtabs(djungle~X+Y, data=snouter))
> image(xtabs(snouter1.1~X+Y, data=snouter))
> 
> # fit and residual plot in space
> ols1 <- lm(snouter1.1 ~ rain + djungle, data=snouter)
> summary(ols1)

Call:
lm(formula = snouter1.1 ~ rain + djungle, data = snouter)

Residuals:
     Min       1Q   Median       3Q      Max 
-26.5858  -7.2563  -0.3317   7.3653  30.1654 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 81.483152   1.077234  75.641   <2e-16 ***
rain        -0.021842   0.001059 -20.616   <2e-16 ***
djungle      0.045460   0.053889   0.844    0.399    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 10.44 on 1105 degrees of freedom
Multiple R-squared:  0.278,	Adjusted R-squared:  0.2766 
F-statistic: 212.7 on 2 and 1105 DF,  p-value: < 2.2e-16

> image(xtabs(residuals(ols1)~X+Y, data=snouter))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("snouter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("volcanoisland")
> ### * volcanoisland
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: volcanoisland
> ### Title: Volcano island
> ### Aliases: volcanoisland
> ### Keywords: datasets
> 
> ### ** Examples
> 
> oldpar <- par(mfrow = c(1,2))
> contour(x = 1:ncol(volcano), y = 1:nrow(volcano), t(volcano), asp = 1)
> points(volcanoisland$x, volcanoisland$y, cex = volcanoisland$wind)
> persp(volcano)
> par(oldpar)
> 
> with(volcanoisland, {
+   
+   plot(year, altitude, cex = beetles/5, pch =2, main = "Beetle counts across altitudinal gradient, triangle is proportional to counts")
+   #lines(plot, altitude * 1000)
+   #points(unique(plot), unique(altitude * 1000) , pch = 3)
+   #text(unique(plot), unique(altitude * 1000) - 50, unique(plot), cex = 0.7 )
+ })
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("volcanoisland", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10 0.81 11.44 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
